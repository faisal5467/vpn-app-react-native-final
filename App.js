// // ///////////////////////////////////////////////////////////////////////////////////////////////

// import React, { useState, useEffect } from "react";
// import {
//   View,
//   Text,
//   Button,
//   FlatList,
//   TouchableOpacity,
//   StyleSheet,
//   ActivityIndicator,
// } from "react-native";
// import {
//   NativeModules,
//   NativeEventEmitter,
//   DeviceEventEmitter,
// } from "react-native";

// import Papa from "papaparse";
// import { useIsFocused } from "@react-navigation/native";
// const { VpnServiceModule, MainActivity } = NativeModules;
// import { Buffer } from "buffer"; // Make sure to install buffer with `npm install buffer`

// const decodeBase64 = (base64String) => {
//   const buffer = Buffer.from(base64String, "base64");
//   return buffer.toString("utf-8");
// };

// const App = () => {
//   const [vpnState, setVpnState] = useState("disconnected");
//   const [vpnList, setVpnList] = useState([]);
//   const [selectedVpn, setSelectedVpn] = useState(null);
//   const [vpnStatus, setVpnStatus] = useState("");
//   const [vpnServers, setVpnServers] = useState([]);
//   const [loading, setLoading] = useState(true);

//   const getVPNServers = async () => {
//     setLoading(true);
//     try {
//       const response = await fetch("http://www.vpngate.net/api/iphone/");
//       if (!response.ok) throw new Error("Network response was not ok");
//       const data = await response.text();

//       const parts = data.split("#");
//       if (parts.length < 2) {
//         throw new Error("Unexpected data format");
//       }

//       const csvString = parts[1].split("*").join("");

//       Papa.parse(csvString, {
//         header: false,
//         skipEmptyLines: true,
//         complete: (results) => {
//           const csvList = results.data;
//           const header = csvList[0];
//           const servers = csvList.slice(1).map((row) => {
//             const tempJson = {};
//             for (let j = 0; j < header.length; j++) {
//               tempJson[header[j]] = row[j];
//             }
//             return tempJson;
//           });
//           setVpnServers(servers);
//           setLoading(false); // Hide loading spinner after fetching
//         },
//       });
//     } catch (error) {
//       console.error("Error fetching or processing data:", error);
//       setLoading(false); // Hide loading spinner on error
//     }
//   };
//   useEffect(() => {
//     getVPNServers();
//   }, []);
//   const reloadServers = () => {
//     getVPNServers();
//   };

//   useEffect(() => {
//     // Initialize VPNs
//     initVpn();
//     const vpnStateListener = DeviceEventEmitter.addListener(
//       "VpnStage",
//       (stage) => {
//         setVpnState(stage.stage.toLowerCase());
//       }
//     );
//     const vpnStatusSubscription = DeviceEventEmitter.addListener(
//       "VpnStatus",
//       (event) => {
//         setVpnStatus(`${event.byte_in || ""}, ${event.byte_out || ""}`);
//       }
//     );

//     return () => {
//       vpnStateListener.remove();
//       vpnStatusSubscription.remove();
//     };
//   }, []);

//   const initVpn = async () => {
//     const vpnList = [
//       {
//         country: "Japan",
//         username: "vpn",
//         password: "vpn",
//         // config: await fetchConfigFile('japan.ovpn'),
//       },
//       // {
//       //   country: 'Thailand',
//       //   username: 'vpn',
//       //   password: 'vpn',
//       //   config: await fetchConfigFile(),
//       // },
//     ];
//     setVpnList(vpnList);
//     // setSelectedVpn(vpnList[0]);
//   };


// const configFile = `###############################################################################
// # OpenVPN 2.0 Sample Configuration File
// # for PacketiX VPN / SoftEther VPN Server
// # 
// # !!! AUTO-GENERATED BY SOFTETHER VPN SERVER MANAGEMENT TOOL !!!
// # 
// # !!! YOU HAVE TO REVIEW IT BEFORE USE AND MODIFY IT AS NECESSARY !!!
// # 
// # This configuration file is auto-generated. You might use this config file
// # in order to connect to the PacketiX VPN / SoftEther VPN Server.
// # However, before you try it, you should review the descriptions of the file
// # to determine the necessity to modify to suitable for your real environment.
// # If necessary, you have to modify a little adequately on the file.
// # For example, the IP address or the hostname as a destination VPN Server
// # should be confirmed.
// # 
// # Note that to use OpenVPN 2.0, you have to put the certification file of
// # the destination VPN Server on the OpenVPN Client computer when you use this
// # config file. Please refer the below descriptions carefully.


// ###############################################################################
// # Specify the type of the layer of the VPN connection.
// # 
// # To connect to the VPN Server as a "Remote-Access VPN Client PC",
// #  specify 'dev tun'. (Layer-3 IP Routing Mode)
// #
// # To connect to the VPN Server as a bridging equipment of "Site-to-Site VPN",
// #  specify 'dev tap'. (Layer-2 Ethernet Bridgine Mode)

// dev tun


// ###############################################################################
// # Specify the underlying protocol beyond the Internet.
// # Note that this setting must be correspond with the listening setting on
// # the VPN Server.
// # 
// # Specify either 'proto tcp' or 'proto udp'.

// proto tcp


// ###############################################################################
// # The destination hostname / IP address, and port number of
// # the target VPN Server.
// # 
// # You have to specify as 'remote <HOSTNAME> <PORT>'. You can also
// # specify the IP address instead of the hostname.
// # 
// # Note that the auto-generated below hostname are a "auto-detected
// # IP address" of the VPN Server. You have to confirm the correctness
// # beforehand.
// # 
// # When you want to connect to the VPN Server by using TCP protocol,
// # the port number of the destination TCP port should be same as one of
// # the available TCP listeners on the VPN Server.
// # 
// # When you use UDP protocol, the port number must same as the configuration
// # setting of "OpenVPN Server Compatible Function" on the VPN Server.

// remote 219.100.37.169 443


// ###############################################################################
// # The HTTP/HTTPS proxy setting.
// # 
// # Only if you have to use the Internet via a proxy, uncomment the below
// # two lines and specify the proxy address and the port number.
// # In the case of using proxy-authentication, refer the OpenVPN manual.

// ;http-proxy-retry
// ;http-proxy [proxy server] [proxy port]


// ###############################################################################
// # The encryption and authentication algorithm.
// # 
// # Default setting is good. Modify it as you prefer.
// # When you specify an unsupported algorithm, the error will occur.
// # 
// # The supported algorithms are as follows:
// #  cipher: [NULL-CIPHER] NULL AES-128-CBC AES-192-CBC AES-256-CBC BF-CBC
// #          CAST-CBC CAST5-CBC DES-CBC DES-EDE-CBC DES-EDE3-CBC DESX-CBC
// #          RC2-40-CBC RC2-64-CBC RC2-CBC
// #  auth:   SHA SHA1 MD5 MD4 RMD160

// cipher AES-128-CBC
// auth SHA1


// ###############################################################################
// # Other parameters necessary to connect to the VPN Server.
// # 
// # It is not recommended to modify it unless you have a particular need.

// resolv-retry infinite
// nobind
// persist-key
// persist-tun
// client
// verb 3
// #auth-user-pass


// ###############################################################################
// # The certificate file of the destination VPN Server.
// # 
// # The CA certificate file is embedded in the inline format.
// # You can replace this CA contents if necessary.
// # Please note that if the server certificate is not a self-signed, you have to
// # specify the signer's root certificate (CA) here.

// <ca>
// -----BEGIN CERTIFICATE-----
// MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw
// TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
// cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4
// WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu
// ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY
// MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc
// h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+
// 0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U
// A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW
// T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH
// B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC
// B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv
// KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn
// OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn
// jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw
// qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI
// rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV
// HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq
// hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL
// ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ
// 3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK
// NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5
// ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur
// TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC
// jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc
// oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq
// 4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA
// mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d
// emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=
// -----END CERTIFICATE-----

// </ca>


// ###############################################################################
// # The client certificate file (dummy).
// # 
// # In some implementations of OpenVPN Client software
// # (for example: OpenVPN Client for iOS),
// # a pair of client certificate and private key must be included on the
// # configuration file due to the limitation of the client.
// # So this sample configuration file has a dummy pair of client certificate
// # and private key as follows.

// <cert>
// -----BEGIN CERTIFICATE-----
// MIICxjCCAa4CAQAwDQYJKoZIhvcNAQEFBQAwKTEaMBgGA1UEAxMRVlBOR2F0ZUNs
// aWVudENlcnQxCzAJBgNVBAYTAkpQMB4XDTEzMDIxMTAzNDk0OVoXDTM3MDExOTAz
// MTQwN1owKTEaMBgGA1UEAxMRVlBOR2F0ZUNsaWVudENlcnQxCzAJBgNVBAYTAkpQ
// MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5h2lgQQYUjwoKYJbzVZA
// 5VcIGd5otPc/qZRMt0KItCFA0s9RwReNVa9fDRFLRBhcITOlv3FBcW3E8h1Us7RD
// 4W8GmJe8zapJnLsD39OSMRCzZJnczW4OCH1PZRZWKqDtjlNca9AF8a65jTmlDxCQ
// CjntLIWk5OLLVkFt9/tScc1GDtci55ofhaNAYMPiH7V8+1g66pGHXAoWK6AQVH67
// XCKJnGB5nlQ+HsMYPV/O49Ld91ZN/2tHkcaLLyNtywxVPRSsRh480jju0fcCsv6h
// p/0yXnTB//mWutBGpdUlIbwiITbAmrsbYnjigRvnPqX1RNJUbi9Fp6C2c/HIFJGD
// ywIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQChO5hgcw/4oWfoEFLu9kBa1B//kxH8
// hQkChVNn8BRC7Y0URQitPl3DKEed9URBDdg2KOAz77bb6ENPiliD+a38UJHIRMqe
// UBHhllOHIzvDhHFbaovALBQceeBzdkQxsKQESKmQmR832950UCovoyRB61UyAV7h
// +mZhYPGRKXKSJI6s0Egg/Cri+Cwk4bjJfrb5hVse11yh4D9MHhwSfCOH+0z4hPUT
// Fku7dGavURO5SVxMn/sL6En5D+oSeXkadHpDs+Airym2YHh15h0+jPSOoR6yiVp/
// 6zZeZkrN43kuS73KpKDFjfFPh8t4r1gOIjttkNcQqBccusnplQ7HJpsk
// -----END CERTIFICATE-----

// </cert>

// <key>
// -----BEGIN RSA PRIVATE KEY-----
// MIIEpAIBAAKCAQEA5h2lgQQYUjwoKYJbzVZA5VcIGd5otPc/qZRMt0KItCFA0s9R
// wReNVa9fDRFLRBhcITOlv3FBcW3E8h1Us7RD4W8GmJe8zapJnLsD39OSMRCzZJnc
// zW4OCH1PZRZWKqDtjlNca9AF8a65jTmlDxCQCjntLIWk5OLLVkFt9/tScc1GDtci
// 55ofhaNAYMPiH7V8+1g66pGHXAoWK6AQVH67XCKJnGB5nlQ+HsMYPV/O49Ld91ZN
// /2tHkcaLLyNtywxVPRSsRh480jju0fcCsv6hp/0yXnTB//mWutBGpdUlIbwiITbA
// mrsbYnjigRvnPqX1RNJUbi9Fp6C2c/HIFJGDywIDAQABAoIBAERV7X5AvxA8uRiK
// k8SIpsD0dX1pJOMIwakUVyvc4EfN0DhKRNb4rYoSiEGTLyzLpyBc/A28Dlkm5eOY
// fjzXfYkGtYi/Ftxkg3O9vcrMQ4+6i+uGHaIL2rL+s4MrfO8v1xv6+Wky33EEGCou
// QiwVGRFQXnRoQ62NBCFbUNLhmXwdj1akZzLU4p5R4zA3QhdxwEIatVLt0+7owLQ3
// lP8sfXhppPOXjTqMD4QkYwzPAa8/zF7acn4kryrUP7Q6PAfd0zEVqNy9ZCZ9ffho
// zXedFj486IFoc5gnTp2N6jsnVj4LCGIhlVHlYGozKKFqJcQVGsHCqq1oz2zjW6LS
// oRYIHgECgYEA8zZrkCwNYSXJuODJ3m/hOLVxcxgJuwXoiErWd0E42vPanjjVMhnt
// KY5l8qGMJ6FhK9LYx2qCrf/E0XtUAZ2wVq3ORTyGnsMWre9tLYs55X+ZN10Tc75z
// 4hacbU0hqKN1HiDmsMRY3/2NaZHoy7MKnwJJBaG48l9CCTlVwMHocIECgYEA8jby
// dGjxTH+6XHWNizb5SRbZxAnyEeJeRwTMh0gGzwGPpH/sZYGzyu0SySXWCnZh3Rgq
// 5uLlNxtrXrljZlyi2nQdQgsq2YrWUs0+zgU+22uQsZpSAftmhVrtvet6MjVjbByY
// DADciEVUdJYIXk+qnFUJyeroLIkTj7WYKZ6RjksCgYBoCFIwRDeg42oK89RFmnOr
// LymNAq4+2oMhsWlVb4ejWIWeAk9nc+GXUfrXszRhS01mUnU5r5ygUvRcarV/T3U7
// TnMZ+I7Y4DgWRIDd51znhxIBtYV5j/C/t85HjqOkH+8b6RTkbchaX3mau7fpUfds
// Fq0nhIq42fhEO8srfYYwgQKBgQCyhi1N/8taRwpk+3/IDEzQwjbfdzUkWWSDk9Xs
// H/pkuRHWfTMP3flWqEYgW/LW40peW2HDq5imdV8+AgZxe/XMbaji9Lgwf1RY005n
// KxaZQz7yqHupWlLGF68DPHxkZVVSagDnV/sztWX6SFsCqFVnxIXifXGC4cW5Nm9g
// va8q4QKBgQCEhLVeUfdwKvkZ94g/GFz731Z2hrdVhgMZaU/u6t0V95+YezPNCQZB
// wmE9Mmlbq1emDeROivjCfoGhR3kZXW1pTKlLh6ZMUQUOpptdXva8XxfoqQwa3enA
// M7muBbF0XN7VO80iJPv+PmIZdEIAkpwKfi201YB+BafCIuGxIF50Vg==
// -----END RSA PRIVATE KEY-----

// </key>

// `

//   const startVpn = async () => {
//     if (selectedVpn == null) return;
//     const config = decodeBase64(selectedVpn.OpenVPN_ConfigData_Base64);
//     console.log("-----------", config);
//     // if (selectedVpn) {
//     if (vpnState === "disconnected") {
//       VpnServiceModule.startVpn(
//         config,
//         selectedVpn.CountryLong,
//         // 'japan',
//         "vpn",
//         "vpn",
//         null,
//         null
//         // []
//       );
//     } else {
//       VpnServiceModule.stopVpn();
//       setVpnState("disconnected");
//       setVpnStatus("Disconnected from VPN");
//     }
//   };

//   return (
//     <View style={styles.container}>
//       <Text style={styles.title}>MTech VPN</Text>
//       <TouchableOpacity style={styles.button} onPress={startVpn}>
//         <Text style={styles.buttonText}>
//           {vpnState === "disconnected" ? "Connect VPN" : vpnState.toUpperCase()}
//         </Text>
//       </TouchableOpacity>
//       <Text style={styles.status}>{vpnStatus}</Text>
//       {loading ? (
//         <View style={{ flex: 1, justifyContent: "center" }}>
//           <ActivityIndicator size="large" color="#007BFF" />
//         </View>
//       ) : (
//         <FlatList
//           data={vpnServers}
//           keyExtractor={(item) => item.HostName}
//           renderItem={({ item }) => (
//             <TouchableOpacity
//               style={styles.listItem}
//               onPress={() => setSelectedVpn(item)}
//             >
//             <View>
//                <Text style={styles.listText}>{item.CountryLong}</Text>
//                <Text style={styles.listText}>{item.CountryShort}</Text>
//             </View>
              
              
//               <View
//                 style={[
//                   styles.indicator,
//                   selectedVpn === item ? styles.selected : styles.unselected,
//                 ]}
//               />
//             </TouchableOpacity>
//           )}
//         />
//       )}

//       <TouchableOpacity style={styles.reloadButton} onPress={reloadServers}>
//         <Text style={styles.buttonText}>Reload</Text>
//       </TouchableOpacity>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     padding: 20,
//     backgroundColor: "#f5f5f5",
//   },
//   title: {
//     fontSize: 24,
//     fontWeight: "bold",
//     marginBottom: 20,
//     textAlign: "center",
//   },
//   button: {
//     backgroundColor: "#007AFF",
//     padding: 15,
//     borderRadius: 25,
//     alignItems: "center",
//     marginBottom: 20,
//   },
//   buttonText: {
//     color: "#ffffff",
//     fontSize: 18,
//   },
//   status: {
//     textAlign: "center",
//     marginBottom: 20,
//   },
//   listItem: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     paddingVertical: 15,
//     paddingHorizontal: 20,
//     borderRadius: 5,
//     backgroundColor: "#ffffff",
//     marginBottom: 10,
//   },
//   listText: {
//     fontSize: 18,
//   },
//   indicator: {
//     width: 20,
//     height: 20,
//     borderRadius: 10,
//   },
//   selected: {
//     backgroundColor: "green",
//   },
//   unselected: {
//     backgroundColor: "gray",
//   },
//   reloadButton: {
//     position: "absolute",
//     bottom: 20,
//     right: 20,
//     backgroundColor: "#007BFF",
//     paddingVertical: 10,
//     paddingHorizontal: 20,
//     borderRadius: 20,
//   },
//   buttonText: {
//     color: "#FFFFFF",
//     fontSize: 16,
//     fontWeight: "bold",
//   },
// });

// export default App;


// // App.js
// // import 'react-native-gesture-handler';
// // import React from 'react';
// // import { NavigationContainer } from '@react-navigation/native';
// // import { createNativeStackNavigator } from '@react-navigation/native-stack';
// // import HomeScreen from './src/screens/HomeScreen';
// // import SettingsScreen from './src/screens/SettingsScreen';
// // import LoginScreen from './src/screens/AuthScreen/LoginScreen';
// // import SignupScreen from './src/screens/AuthScreen/SignupScreen';
// // import ForgotPasswordScreen from './src/screens/AuthScreen/ForgotPasswordScreen';
// // import OTPVerificationScreen from './src/screens/AuthScreen/OTPVerificationScreen';
// // import LocationSelectionScreen from './src/screens/LocationSelectionScreen';
// // import MyAccount from './src/screens/MyAccount';
// // import TermServices from './src/screens/TermServices';
// // import PrivacyPolicy from './src/screens/PrivacyPolicy';
// // import AboutApp from './src/screens/AboutApp';
// // import ChangePasswordScreen from './src/screens/ChangePasswordScreen';
// // import Help from './src/screens/Help';
// // import HelpDetailScreen from './src/screens/HelpDetailScreen';
// // import OnboardingScreen from './src/screens/Onboarding/OnboardingScreen';
// // import CustomDrawer from './src/screens/CustomDrawer';



// // const Stack = createNativeStackNavigator();
// // const App = () => {
// //   return (
// //     <NavigationContainer  >
// //       <Stack.Navigator  screenOptions={{
// //       headerShown:false,
    
      
// //   }}>

// //       {/* <Stack.Screen name="OnboardingScreen" component={OnboardingScreen} /> */}

// //       {/* <Stack.Screen name="CustomDrawer" component={CustomDrawer} /> */}
// //       <Stack.Screen name="LoginScreen" component={LoginScreen} />
// //       <Stack.Screen name="SignupScreen" component={SignupScreen} />
// //       <Stack.Screen name="ForgotPasswordScreen" component={ForgotPasswordScreen} />
// //       <Stack.Screen name="OTPVerificationScreen" component={OTPVerificationScreen} />
      
// //         <Stack.Screen name="HomeScreen" component={HomeScreen} />
// //         <Stack.Screen name="LocationSelectionScreen" component={LocationSelectionScreen} />
// //         <Stack.Screen name="MyAccount" component={MyAccount} />
// //         <Stack.Screen name="SettingsScreen" component={SettingsScreen} />
// //         <Stack.Screen name="TermServices" component={TermServices} />
// //         <Stack.Screen name="PrivacyPolicy" component={PrivacyPolicy} />
// //         <Stack.Screen name="AboutApp" component={AboutApp} />
// //         <Stack.Screen name="ChangePasswordScreen" component={ChangePasswordScreen} />


// //       </Stack.Navigator>
// //     </NavigationContainer>
// //   );
// // };

// // export default App;




























import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createDrawerNavigator } from '@react-navigation/drawer';
import { View, Text, Button } from 'react-native';
import CustomDrawerContent from './src/navigation/CustomDrawerContent';
import Animated from 'react-native-reanimated';
import LoginScreen from './src/screens/AuthScreen/LoginScreen';
import SignupScreen from './src/screens/AuthScreen/SignupScreen';
import HomeScreen from './src/screens/HomeScreen';
import HelpDetailScreen from './src/screens/HelpDetailScreen';
import MyAccount from './src/screens/MyAccount';
import SettingsScreen from './src/screens/SettingsScreen';
import Help from './src/screens/Help';
import AboutApp from './src/screens/AboutApp';
import AboutScreen from './src/screens/AboutScreen';
import LocationSelectionScreen from './src/screens/LocationSelectionScreen';
import PrivacyPolicy from './src/screens/PrivacyPolicy';
import TermServices from './src/screens/TermServices';
import OnboardingScreen from './src/screens/Onboarding/OnboardingScreen';
import ChangePasswordScreen from './src/screens/ChangePasswordScreen';
import ForgotPasswordScreen from './src/screens/AuthScreen/ForgotPasswordScreen';
import OTPVerificationScreen from './src/screens/AuthScreen/OTPVerificationScreen';


// Authentication Stack (Login, Signup, etc.)
// const AuthStack = createStackNavigator();
const AuthStack = createNativeStackNavigator();
const AuthStackScreen = () => (
  <AuthStack.Navigator screenOptions={{headerShown:false}}>
    <AuthStack.Screen name="OnboardingScreen" component={OnboardingScreen} />
    <AuthStack.Screen name="LoginScreen" component={LoginScreen} />
    <AuthStack.Screen name="SignupScreen" component={SignupScreen} />
    <AuthStack.Screen name="ForgotPasswordScreen" component={ForgotPasswordScreen} />
    <AuthStack.Screen name="OTPVerificationScreen" component={OTPVerificationScreen} />
    <AuthStack.Screen name="MainDrawer" component={MainDrawer} />
    <AuthStack.Screen name="TermServices" component={TermServices} />
    <AuthStack.Screen name="PrivacyPolicy" component={PrivacyPolicy} />
    
  </AuthStack.Navigator>
);

// Main App Stack (Home, Details, etc.)
const MainStack = createNativeStackNavigator();
const MainStackScreen = () => (
  <MainStack.Navigator screenOptions={{headerShown:false}}>
    <MainStack.Screen name="HomeScreen" component={HomeScreen} />
    <MainStack.Screen name="AboutScreen" component={AboutScreen} />
    <MainStack.Screen name="LocationSelectionScreen" component={LocationSelectionScreen} />

  </MainStack.Navigator>
);

// Drawer Navigator (Main Stack + Drawer Items)
const Drawer = createDrawerNavigator();
const MainDrawer = () => (
  // <Drawer.Navigator>
    //  <Drawer.Navigator drawerContent={(props) => <CustomDrawerContent {...props} />}>
    <Drawer.Navigator
    drawerContent={(props) => <CustomDrawerContent {...props} />}
    screenOptions={{
      drawerStyle: {
        backgroundColor: '#ffa500', // Gradient-like color similar to your image
        width: 300,
      },
      headerShown:false,
      drawerType: 'slide', // Drawer slides over the content
      overlayColor: 'transparent', // Transparent background during the slide
    }}
  >
    <Drawer.Screen name="MainStackScreen" component={MainStackScreen} />
    <Drawer.Screen name="MyAccount" component={MyAccount} />
    <Drawer.Screen name="SettingsScreen" component={SettingStackNavigator} />
    {/* <Drawer.Screen name="SettingsScreen" component={SettingsScreen} /> */}
    <Drawer.Screen name="Help" component={HelpStackNavigator} />
  </Drawer.Navigator>
);


const HelpStack = createNativeStackNavigator();

const HelpStackNavigator = () => {
  return (
    <HelpStack.Navigator initialRouteName="HelpScreen">
      <HelpStack.Screen 
        name="HelpScreen" 
        component={Help} 
        options={{ headerShown: false }} // Assuming you have a custom header
      />
      <HelpStack.Screen 
        name="HelpDetailScreen" 
        component={HelpDetailScreen} 
        options={{ headerShown: false }} // Custom header for HelpScreenDetails
      />
    </HelpStack.Navigator>
  );
};

const SettingStack = createNativeStackNavigator();
const SettingStackNavigator = () => {
  return (
    <SettingStack.Navigator>
      <SettingStack.Screen 
        name="SettingsScreen" 
        component={SettingsScreen} 
        options={{ headerShown: false }} // Assuming you have a custom header
      />
      <SettingStack.Screen 
        name="PrivacyPolicy" 
        component={PrivacyPolicy} 
        options={{ headerShown: false }} // Custom header for HelpScreenDetails
      />
      <SettingStack.Screen 
        name="TermServices" 
        component={TermServices} 
        options={{ headerShown: false }} // Custom header for HelpScreenDetails
      />
      <SettingStack.Screen 
        name="AboutApp" 
        component={AboutApp} 
        options={{ headerShown: false }} // Custom header for HelpScreenDetails
      />
      <SettingStack.Screen 
        name="ChangePasswordScreen" 
        component={ChangePasswordScreen} 
        options={{ headerShown: false }} // Custom header for HelpScreenDetails
      />
    </SettingStack.Navigator>
  );
};
// Main App Component
const App = () => {
  const isLoggedIn = false; // Change this for logged-in state

  return (
    <NavigationContainer>
      {isLoggedIn ? <MainDrawer /> : <AuthStackScreen />}
    </NavigationContainer>
  );
};

export default App;
